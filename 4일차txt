기본키 설정하면서 테이블 만들기
CREATE TABLE tblExam(
		id int PRIMARY KEY,
		name varchar(10)
		);
		
		
(단점) primary key 별칭을 줄수없음
(추천방법)	
	CREATE TABLE tblExam(
		id int ,
		name varchar(10)
		CONSTRAINT pk_id PRIMARY KEY(id,name)
		);	
	(제약 추가)	기본키
	ALTER TABLE tblExam ADD Constraint pk_id Primary Key (id) ;
	(제약 삭제)
	ALTER TABLE tblExam DROP PRIMARY KEY;
	(필드 수정)
	ALTER TABLE tblExam MODIFY id int not null;
	ALTER TABLE tblExam MODIFY name varchar(20) null;
	ALTER TABLE tblExam MODIFY age int null;
======================================================================	
2) Unique	
Unique 중복만 막아주는 키워드
  ALTER TABLE tblExam ADD age int null;
  
	DESC tblExam;
		ALTER TABLE tblExam ADD CONSTRAINT pk_id PRIMARY KEY(id);
		ALTER TABLE tblExam ADD CONSTRAINT uk_name Unique(name);
		ALTER TABLE tblExam ADD CONSTRAINT uk_age Unique(age);
		ND속성(중복) name 이 Unique 속성이라 
		INSERT INTO tblexam(id, name) VALUES(1,'hong');
        INSERT INTO tblexam(id, name) VALUES(2,'hong');
======================================================================
3)예방차원에서 사용할 수 있는 테이블 자체옵션(제약은 아니지만 원척적으로 못들어오게 옵션임)
	- NN 속성 : default (null값이 안되도록 디폴트값)
	- ND 속성 : auto_increment(자동적으로 들어가도록 , 절대 중복이 안될수밖에 없음)
	DROP TABLE tblExam;
	CREATE TABLE tblExam(
	id int auto_increment,
	name varchar(10) default '무명씨',
	age int default 0
	);
	
	varchar(n) : 가변길이
	char(n) : 고정길이
==============================================
4) FOREIGN KEY
 CREATE TABLE tbldept(
	deptno int,
	dname varchar(10)
	);
	INSERT INTO tbldept VALUES(1000,'sales');
	INSERT INTO tbldept VALUES(1001,'Research');
	    CREATE table tblemp(
		empno int,
        ename varchar(10),
        hiredate datetime,
        deptno int);
	부서번호 1002가 안들어가게 하기위해 외래키 필요
	INSERT INTO tblemp(empno, ename,hiredate,deptno)
    values(1,'hong',now(),1002); 	
	
	ALTER TABLE tblemp ADD CONSTRAINT fk_deptno 
	FOREIGN KEY(deptno) REFERENCES tbldept(deptno)
	
	ALTER TABLE 참초할테이블 ADD CONSTRAINT fk_deptno(별칭) 
	FOREIGN KEY(외래키속성이름) REFERENCES 부모테이블(부모테이블 속성)
	기본키가 있어야 할수있음(not null , unique)
	ALTER TABLE tbldept ADD Constraint pk_deptno Primary Key (deptno) ;
	INSERT INTO tblemp(empno, ename, hiredate, deptno) VALUES(1,'hong',now(),1001);
	 (외래키로되있어서 만1로 못바꿈) emp에서 deptno가 1001 인 데이터가 있으니깐
	 UPDATE tbldept SET deptno=10001 WHERE deptno= 1001;
	(가능 ) emp에서 deptno가 1000인 데이터없어서 가능
	UPDATE tbldept SET deptno=10001 WHERE deptno= 1000;
	
12 VIEW : 가상 테이블 58,59,60
	(1) 정의 : 실제 테이블을 여러 관점에서 투영한 가상 테이블
	(2) 문법
		CREATE VIEW 뷰이름
		AS
		SELECT 문
	(3) 주의할 점 : DML 작업 
	SELECT empno, ename , sal, comm, dname FROM emp JOIN dept ON
	emp.deptno = dept.deptno WHERE sal >= 1500;
	
	 CREATE VIEW vw_emp1
    As
    SELECT empno, ename , sal, comm, dname FROM emp JOIN dept ON
	emp.deptno = dept.deptno WHERE sal >= 1500;
        
	SELECT * FROM vw_emp1;
	SELECT * FROM views WHERE table_name = 'emp';
13.인덱스(INDEX)
	(1) 문법
		1) CREATE INDEX 인덱스명 ON 테이블명(필드명, ...)
		2) 제약을 통해 자동 생성 
	
	CREATE TABLE tblindex(
	id int,
	name varchar(10),
	point float
	);
	INSERT INTO tblindex VALUES(5,'scott',9.8);
	INSERT INTO tblindex VALUES(2,'adam',4.2);
	INSERT INTO tblindex VALUES(7,'john',6.7);
	INSERT INTO tblindex VALUES(1,'tom',5);
	
	EXPLAIN SELECT * FROM tblindex WHERE point >=4;
	EXPLAIN SELECT * FROM tblindex WHERE id =2;
	CREATE INDEX idx_point ON tblindex(point);
	
	ALTER TABLE tblindex ADD CONSTRAINT pk_id PRIMARY KEY(id);
14.Transaction SQL활용 26페이지 
	- 작업의 단위 , ALL OR Nothing!
	- 분할 할 수 없는 최소 단위. - 일처리 단위 - 
	- show variables like 'datadir';
	- 트랜잭션 제어 명령어
		-rollback (실수로 삭제한거 다시 rollback 키워드로 회복가능)
		-commit 자동으로 aouto commit 되있음
			SELECT @@autocommit; >> 1 
			SET @@autocommit=false; >> false로
		트렌젝션 특징
		Atomicity : all or nonthig;
		Consistency : 무결성
		isolateion  : 독립성
		durablilty  : 장애 대응성
	- 동기화 처리
		mysql은 하나씩 독립적으로 실행함
15. 프로시저 , 트리거 
16. DB 설계(모델링)
	1.설계 ERD 개념적설계,논리적설계(테이블로,어떤데이터베이스 쓸지는 x),물리적설계(어떤 데이터베이스쓸지)
	2.개발
	3.테스트 4.배포 5.유지보수
	폭포수(Waterfall) Agile - xp - TDD 테스트주도
	
	일대일관계 - 테이블간 속성이 하나씩 매치되는것
	일대다 관계 - 부모자식관계 
		제일 바람직한 관계 